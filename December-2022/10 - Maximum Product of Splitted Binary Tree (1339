/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 /*
 minimum difference 
 */
class Solution {
public:
    long long ans = 1;
    map<TreeNode*,int> dp;
    long long helper(TreeNode* root,TreeNode* node){
        if(!node){
            dp[node] = 0;
            return 0;
        };
        long long sum=0;
        sum+=helper(root,node->left);      
        sum+=helper(root,node->right);
        dp[node] =  dp[node->left] + dp[node->right] + node->val;
        return sum+node->val;
    }
    int maxProduct(TreeNode* root) {
        long long maxSum=helper(root,root);
        long long currAns = 0;
        for(auto it = dp.begin(); it!=dp.end();it++){
            currAns = (it->second) * (maxSum - it->second);
            if(ans<currAns){
                ans =currAns;
            }
        }
        return ans% 1000000007;
    }
};
