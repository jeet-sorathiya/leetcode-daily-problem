class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int m = maze[0].size(), n = maze.size();
        queue<pair<int, int>> q;
        q.push({entrance[0], entrance[1]});
        maze[entrance[0]][entrance[1]] = '+';
        
        int level = 0;
        
        int dr[] = {1, -1, 0, 0};
        int dc[] = {0, 0, -1, 1};
        
        
        while(!q.empty())
        {
            int size = q.size();
            level++;
            
            for(int i=0; i<size; i++)
            {
                auto cur = q.front();
                q.pop();    
                int row = cur.first;
                int col = cur.second;
                for(int j=0; j<4; j++)
                {
                    int newRow = row + dr[j];
                    int newCol = col + dc[j];
                    
                    if(newRow >= 0 and newCol >= 0 and newRow < n and newCol < m)
                    {
                        if(maze[newRow][newCol] == '+')
                        {
                            continue;
                        }
                        
                        if(newRow == 0 or newCol == 0 or newRow == n - 1 or newCol == m - 1)
                        {
                            return level;
                        }
                        
                        q.push({newRow, newCol});
                        maze[newRow][newCol] = '+';
                    }
                }
            }
        }
        return -1;
    }
};
